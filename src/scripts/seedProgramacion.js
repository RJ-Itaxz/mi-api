require('dotenv').config();
const mongoose = require('mongoose');
const Materia = require('../models/Materia');
const Unidad = require('../models/Unidad');
const Tema = require('../models/Tema');
const Ejercicio = require('../models/Ejercicio');
const Usuario = require('../models/Usuario');

const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/mi-api-db';

// Datos estructurados de las materias
const materiasData = [
  {
    nombre: 'FUNDAMENTOS DE PROGRAMACI√ìN',
    descripcion: 'Introducci√≥n a la programaci√≥n mediante el dise√±o de algoritmos y conceptos b√°sicos de control de flujo.',
    color: '#3B82F6',
    unidades: [
      {
        numero: 1,
        titulo: 'Dise√±o Algor√≠tmico',
        descripcion: 'Conceptos fundamentales del dise√±o de algoritmos',
        temas: [
          { orden: 1, titulo: 'Conceptos b√°sicos' },
          { orden: 2, titulo: 'Representaci√≥n de algoritmos: gr√°fica y pseudoc√≥digo' },
          { orden: 3, titulo: 'Dise√±o de algoritmos' },
          { orden: 4, titulo: 'Dise√±o de funciones' }
        ]
      },
      {
        numero: 2,
        titulo: 'Introducci√≥n a la Programaci√≥n',
        descripcion: 'Fundamentos del lenguaje de programaci√≥n',
        temas: [
          { orden: 1, titulo: 'Conceptos b√°sicos' },
          { orden: 2, titulo: 'Caracter√≠sticas del lenguaje de programaci√≥n' },
          { orden: 3, titulo: 'Estructura b√°sica de un programa' },
          { orden: 4, titulo: 'Elementos del lenguaje: tipos de datos, literales, constantes, variables, identificadores, par√°metros, operadores y salida de datos' },
          { orden: 5, titulo: 'Traducci√≥n de un programa: compilaci√≥n, enlace, ejecuci√≥n y errores' }
        ]
      },
      {
        numero: 3,
        titulo: 'Control de Flujo',
        descripcion: 'Estructuras de control de programaci√≥n',
        temas: [
          { orden: 1, titulo: 'Estructuras secuenciales' },
          { orden: 2, titulo: 'Estructuras selectivas: simple, doble y m√∫ltiple' },
          { orden: 3, titulo: 'Estructuras iterativas: repetir mientras, hasta, desde' }
        ]
      },
      {
        numero: 4,
        titulo: 'Organizaci√≥n de datos',
        descripcion: 'Manejo de estructuras de datos b√°sicas',
        temas: [
          { orden: 1, titulo: 'Arreglos' },
          { orden: 2, titulo: 'Unidimensionales: conceptos b√°sicos, operaciones y aplicaciones' },
          { orden: 3, titulo: 'Multidimensionales: conceptos b√°sicos, operaciones y aplicaciones' },
          { orden: 4, titulo: 'Estructuras o registros' }
        ]
      },
      {
        numero: 5,
        titulo: 'Modularidad',
        descripcion: 'Programaci√≥n modular y funciones',
        temas: [
          { orden: 1, titulo: 'Declaraci√≥n y uso de m√≥dulos' },
          { orden: 2, titulo: 'Paso de par√°metros o argumentos' },
          { orden: 3, titulo: 'Implementaci√≥n' }
        ]
      }
    ]
  },
  {
    nombre: 'PROGRAMACI√ìN ORIENTADA A OBJETOS',
    descripcion: 'Paradigma de programaci√≥n orientada a objetos, clases, herencia y polimorfismo.',
    color: '#10B981',
    unidades: [
      {
        numero: 1,
        titulo: 'Introducci√≥n al paradigma de la programaci√≥n orientada a objetos',
        descripcion: 'Conceptos fundamentales de POO',
        temas: [
          { orden: 1, titulo: 'Elementos del modelo de objetos: clases, objetos, abstracci√≥n, modularidad, encapsulamiento, herencia y polimorfismo' },
          { orden: 2, titulo: 'Lenguaje de modelado unificado: diagrama de clases' }
        ]
      },
      {
        numero: 2,
        titulo: 'Clases y objetos',
        descripcion: 'Declaraci√≥n y uso de clases y objetos',
        temas: [
          { orden: 1, titulo: 'Declaraci√≥n de clases: atributos, m√©todos, encapsulamiento' },
          { orden: 2, titulo: 'Instanciaci√≥n de una clase' },
          { orden: 3, titulo: 'Referencia al objeto actual' },
          { orden: 4, titulo: 'M√©todos: declaraci√≥n, mensajes, paso de par√°metros, retorno de valores' },
          { orden: 5, titulo: 'Constructores y destructores declaraci√≥n, uso y aplicaciones' },
          { orden: 6, titulo: 'Sobrecarga de m√©todos' },
          { orden: 7, titulo: 'Sobrecarga de operadores: Concepto y utilidad, operadores unarios y binarios' }
        ]
      },
      {
        numero: 3,
        titulo: 'Herencia',
        descripcion: 'Herencia y reutilizaci√≥n de c√≥digo',
        temas: [
          { orden: 1, titulo: 'Definici√≥n: clase base, clase derivada' },
          { orden: 2, titulo: 'Clasificaci√≥n: herencia simple, herencia m√∫ltiple' },
          { orden: 3, titulo: 'Reutilizaci√≥n de miembros heredados' },
          { orden: 4, titulo: 'Referencia al objeto de la clase base' },
          { orden: 5, titulo: 'Constructores y destructores en clases derivadas' },
          { orden: 6, titulo: 'Redefinici√≥n de m√©todos en clases derivadas' }
        ]
      },
      {
        numero: 4,
        titulo: 'Polimorfismo',
        descripcion: 'Polimorfismo, clases abstractas e interfaces',
        temas: [
          { orden: 1, titulo: 'Definici√≥n' },
          { orden: 2, titulo: 'Clases abstractas: definici√≥n, m√©todos abstractos, implementaci√≥n de clases abstractas, modelado de clases abstractas' },
          { orden: 3, titulo: 'Interfaces: definici√≥n, implementaci√≥n de interfaces, herencia de interfaces' },
          { orden: 4, titulo: 'Variables polim√≥rficas (plantillas): definici√≥n, uso y aplicaciones' },
          { orden: 5, titulo: 'Reutilizaci√≥n de c√≥digo' }
        ]
      },
      {
        numero: 5,
        titulo: 'Excepciones',
        descripcion: 'Manejo de excepciones y errores',
        temas: [
          { orden: 1, titulo: 'Definici√≥n' },
          { orden: 2, titulo: 'Tipos de excepciones' },
          { orden: 3, titulo: 'Propagaci√≥n de excepciones' },
          { orden: 4, titulo: 'Gesti√≥n de excepciones: manejo de excepciones, lanzamiento de excepciones' },
          { orden: 5, titulo: 'Creaci√≥n y manejo de excepciones definidas por el usuario' }
        ]
      },
      {
        numero: 6,
        titulo: 'Flujos y archivos',
        descripcion: 'Manejo de archivos y persistencia',
        temas: [
          { orden: 1, titulo: 'Definici√≥n' },
          { orden: 2, titulo: 'Clasificaci√≥n: Archivos de texto y binarios' },
          { orden: 3, titulo: 'Operaciones b√°sicas y tipos de acceso' },
          { orden: 4, titulo: 'Manejo de objetos persistentes' }
        ]
      }
    ]
  }
];

async function seed() {
  try {
    console.log('üîå Conectando a MongoDB...');
    await mongoose.connect(MONGO_URI);
    console.log('‚úÖ Conectado a MongoDB');

    // Buscar o crear usuario ADMIN para asignar como autor
    let admin = await Usuario.findOne({ role: 'ADMIN' });
    if (!admin) {
      console.log('‚ö†Ô∏è  No se encontr√≥ usuario ADMIN. Creando uno temporal...');
      const bcrypt = require('bcryptjs');
      const salt = await bcrypt.genSalt(10);
      const passwordHash = await bcrypt.hash('admin123', salt);
      
      admin = await Usuario.create({
        nombre: 'Administrador del Sistema',
        email: 'admin@sistema.com',
        password: passwordHash,
        role: 'ADMIN'
      });
      console.log('‚úÖ Usuario ADMIN temporal creado (email: admin@sistema.com, password: admin123)');
    }

    // Limpiar datos anteriores
    console.log('\nüóëÔ∏è  Eliminando datos anteriores...');
    await Ejercicio.deleteMany({});
    console.log('   - Ejercicios eliminados');
    await Tema.deleteMany({});
    console.log('   - Temas eliminados');
    await Unidad.deleteMany({});
    console.log('   - Unidades eliminadas');
    await Materia.deleteMany({});
    console.log('   - Materias eliminadas');

    console.log('\nüìö Creando materias, unidades y temas...\n');

    for (const materiaData of materiasData) {
      // Crear materia
      const materia = await Materia.create({
        nombre: materiaData.nombre,
        descripcion: materiaData.descripcion,
        color: materiaData.color,
        autor: admin._id
      });
      console.log(`‚úÖ Materia creada: ${materia.nombre}`);

      // Crear unidades de la materia
      for (const unidadData of materiaData.unidades) {
        const unidad = await Unidad.create({
          materia: materia._id,
          numero: unidadData.numero,
          titulo: unidadData.titulo,
          descripcion: unidadData.descripcion
        });
        console.log(`   ‚îú‚îÄ Unidad ${unidad.numero}: ${unidad.titulo}`);

        // Crear temas de la unidad
        for (const temaData of unidadData.temas) {
          const tema = await Tema.create({
            unidad: unidad._id,
            titulo: temaData.titulo,
            orden: temaData.orden
          });
          console.log(`   ‚îÇ  ‚îî‚îÄ Tema ${tema.orden}: ${tema.titulo}`);
        }
      }
      console.log('');
    }

    // Resumen final
    const totalMaterias = await Materia.countDocuments();
    const totalUnidades = await Unidad.countDocuments();
    const totalTemas = await Tema.countDocuments();

    console.log('üìä RESUMEN:');
    console.log(`   ‚úÖ ${totalMaterias} Materias creadas`);
    console.log(`   ‚úÖ ${totalUnidades} Unidades creadas`);
    console.log(`   ‚úÖ ${totalTemas} Temas creados`);
    console.log('\nüéâ Seed completado exitosamente!\n');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error durante el seed:', error);
    process.exit(1);
  }
}

// Ejecutar seed
seed();
